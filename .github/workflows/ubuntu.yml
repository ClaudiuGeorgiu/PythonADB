name: Ubuntu

on:
  push:
    branches:
      - master
  pull_request:

jobs:
  test:
    name: Test on Python ${{ matrix.python-version }} and ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: [ 3.8, 3.9, '3.10', '3.11', '3.12', '3.13' ]
        os: [ ubuntu-latest ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Enable KVM group perms
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip
          cache-dependency-path: requirements*.txt

      - name: Install Python packages
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r ./requirements.txt

      - name: Setup emulator
        run: |
          export PATH="${PATH}:${ANDROID_HOME}/cmdline-tools/latest/bin:${ANDROID_HOME}/platform-tools"
          sudo chmod a+x ${ANDROID_HOME}/cmdline-tools/latest/bin/avdmanager
          echo yes | sudo -E env "PATH=$PATH" sdkmanager "emulator" "platform-tools" "system-images;android-25;default;x86" | grep -v = || true
          echo no | avdmanager create avd -f -n test -k "system-images;android-25;default;x86" --abi x86
          ${ANDROID_HOME}/emulator/emulator -avd test -no-window -no-audio -no-boot-anim -no-snapshot -no-metrics -accel on &
          adb wait-for-device shell 'until getprop init.svc.bootanim 2>&1 | grep -q "stopped"; do echo "--- checking emulator ---"; sleep 5; done;'
          adb wait-for-device shell 'until pm get-install-location; do echo "--- checking emulator ---"; sleep 5; done;'
          adb wait-for-device shell 'sleep 10'

      - name: Run tests
        run: |
          export PATH="${PATH}:${ANDROID_HOME}/platform-tools"
          pytest --verbose --cov=./ --cov-report xml

      - name: Upload tests coverage to Codacy
        if: contains(github.event_name, 'pull_request') == false
        uses: codacy/codacy-coverage-reporter-action@v1
        with:
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          language: Python
          coverage-reports: coverage.xml

      - name: Upload tests coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false
